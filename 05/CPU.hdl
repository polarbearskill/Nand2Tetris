// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //decode
    And(a=instruction[15],b=true,out=CCode);
    Not(in=CCode,out=ACode);

    //1st Mux
    Mux16(a=instruction,b=ALUOut,sel=CCode,out=FirstMuxOut);

    //A Register
    ARegister(in=FirstMuxOut,load=ACode,out=RegAOut);
    And16(a=RegAOut,b=true,out[0]=addressM[0],out[1]=addressM[1],out[2]=addressM[2],out[3]=addressM[3],out[4]=addressM[4],out[5]=addressM[5],out[6]=addressM[6],out[7]=addressM[7],out[8]=addressM[8],out[9]=addressM[9],out[10]=addressM[10],out[11]=addressM[11],out[12]=addressM[12],out[13]=addressM[13],out[14]=addressM[14],out[15]=dummy);    

    //2nd Mux
    Mux16(a=RegAOut,b=inM,sel=instruction[12],out=SecondMuxOut);

    //ALU
    ALU(x=RegDOut,y=SecondMuxOut,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUOut,out=outM,zr=zr,ng=ng);

    //D Register
    DRegister(in=ALUOut,load=CCode,out=RegDOut);     
    
    //Calculate Jump
    Or(a=ng,b=zr,out=OrOut);
    Not(in=OrOut,out=NorOut);
    And(a=instruction[2],b=ng,out=z1);
    And(a=instruction[1],b=zr,out=z2);
    And(a=instruction[0],b=NorOut,out=z3);
    And(a=z1,b=z2,out=z4);
    And(a=z3,b=z4,out=z5);
    Not(in=z5,out=z6);

    //Program Counter
    PC(in=RegAOut,load=z5,inc=z6,reset=reset,out[0..14]=pc);

    //Write to M?
    And(a=instruction[3],b=CCode,out=writeM);
}